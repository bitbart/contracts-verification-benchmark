{
    "name": "Vault",
    "specification": "file:spec.md",
    "properties": {
        "cancel-not-revert": "a `cancel()` transaction does not revert if the sender uses the recovery key, and the state is REQ.",
        "cancel-revert": "a `cancel()` transaction aborts if the signer uses a key different from the recovery key, or the state is not REQ.",
        "finalize-assets-transfer": "after a non-reverting `finalize()`, exactly amount units of T pass from the control of the contract to that of the receiver.",
        "finalize-assets-transfer-receive": "after a non-reverting `finalize()`, if the `receive` method of `receiver` just accepts all ETH, then exactly amount units of T pass from the control of the contract to that of the receiver.",
        "finalize-before-deadline-revert": "a `finalize()` transaction called immediately after a non-reverting `withdraw()` aborts if sent before wait_time units have elapsed since the `withdraw()`.",
        "finalize-not-revert": "a `finalize()` transaction does not abort if it is sent by the owner, in state REQ, and at least wait_time time units have elapsed after request_timestamp.",
        "finalize-or-cancel-twice-revert": "a `finalize()` or `cancel()` transaction aborts if performed immediately after another `finalize()` or `cancel()`.",
        "finalize-revert": "a `finalize()` transaction aborts if the sender is not the owner, or if the state is not REQ, or wait_time has not passed since request_time.",
        "finalize-sent-leq-amount": "after a non-reverting `finalize()`, the contract balance is decreased by at most amount units of T.",
        "finalize-sent-eq-amount": "after a non-reverting `finalize()`, the contract balance is decreased by exactly units of T.",
        "keys-distinct": "the owner key and the recovery key are distinct.",
        "keys-invariant-inter": "in any blockchain state, the owner key and the recovery key cannot be changed after the contract is deployed.",
        "keys-invariant-intra": "during the execution of a transaction, the owner key and the recovery key cannot be changed after the contract is deployed.",
        "receive-not-revert": "anyone can always send tokens to the contract",
        "state-idle-req-inter": "in any blockchain state, the vault state is IDLE or REQ",
        "state-idle-req-intra": "during the execution of a transaction, the vault state is always IDLE or REQ.",
        "state-req-amount-consistent": "if the state is REQ, then the amount to be withdrawn is less than or equal to the contract balance.",
        "state-update": "the contract implements a state machine with transitions: s -> s upon a receive (for any s), IDLE -> REQ upon a withdraw, REQ -> IDLE upon a finalize or a cancel.",
        "state-update-receive": "if the `receive` method of `receiver` just accepts all ETH, the contract implements a state machine with transitions: s -> s upon a receive (for any s), IDLE -> REQ upon a withdraw, REQ -> IDLE upon a finalize or a cancel.",
        "withdraw-finalize-not-revert": "a `finalize()` transaction called immediately after a non-reverting `withdraw()` does not abort if sent after wait_time units have elapsed.",
        "withdraw-finalize-not-revert-receive": "if the `receive` method of `receiver` just accepts all ETH, a `finalize()` transaction called immediately after a non-reverting `withdraw()` does not abort if sent after wait_time units have elapsed.",
        "withdraw-finalize-revert-inter": "a `finalize` transaction called before `wait_time` since a non-reverting `withdraw`, possibly with in-between transactions, reverts.",
        "withdraw-not-revert": "a `withdraw(amount)` transaction does not abort if amount is less than or equal to the contract balance, the sender is the owner, and the state is IDLE.",
        "withdraw-revert": "a `withdraw(amount)` transaction aborts if amount is more than the contract balance, or if the sender is not the owner, or if the state is not IDLE.",
        "withdraw-withdraw-revert": "a `withdraw()` transaction aborts if performed immediately after another `withdraw()`.",
        "okey-rkey-private-withdraw": "if an actor holds both the owner and recovery key, and no one else knows the recovery key, the former is able to eventually withdraw all the contract balance with probability 1 (for every fair trace).",
        "rkey-no-withdraw": "if an actor holds the recovery key, they can always prevent other actors from withdrawing funds from the contract.",
        "tx-idle-req": "if the state is IDLE, someone can fire a transaction that updates the state to REQ.",
        "tx-idle-req-eoa": "if the state is IDLE and `owner` is an EOA, someone can fire a transaction that updates the state to REQ.",
        "tx-req-idle": "if the state is REQ, someone can fire a transaction that updates the state to IDLE.",
        "tx-req-idle-eoa": "if the state is REQ and `recovery` is an EOA, someone can fire a transaction that updates the state to IDLE.",
        "tx-owner-assets-transfer": "if the state is REQ and wait_time has passed since request_time, the owner can fire a transaction that transfers the contract balance to the receiver.",
        "tx-owner-assets-transfer-eoa-receive": "if the state is REQ, wait_time has passed since request_time, `owner` is an EOA, and the `receive` method of `receiver` just accepts all ETH, then the owner can fire a transaction that transfers the contract balance to the receiver.",
        "tx-tx-assets-transfer": "in state IDLE, someone can fire a sequence of two transactions that transfers the contract balance to the receiver.",
        "tx-tx-assets-transfer-eoa": "if `owner` is an EOA, then in state IDLE, someone can fire a sequence of two transactions that transfers the contract balance to the receiver.",
        "tx-tx-assets-transfer-eoa-receive": "if `owner` is an EOA and the `receive` method of `receiver` just accepts all ETH, then in state IDLE, someone can fire a sequence of two transactions that transfers the contract balance to the receiver.",
        "tx-tx-assets-transfer-eoa-receive-private": "if `owner` is an EOA, the `receive` method of `receiver` just accepts all ETH, and the adversary does not know the recovery key, then in state IDLE, the owner can fire a sequence of two transactions that transfers the contract balance to the receiver, regardless of possible transactions fired by the adversary before or in between."
    },
    "property-types": {
        "cancel-not-revert": "function spec",
        "cancel-revert": "function spec",
        "finalize-assets-transfer": "function spec",
        "finalize-assets-transfer-receive": "function spec",
        "finalize-before-deadline-revert": "multiple-transition invariant",
        "finalize-not-revert": "function spec",
        "finalize-or-cancel-twice-revert": "multiple-transition invariant",
        "finalize-revert": "function spec",
        "finalize-sent-leq-amount": "function spec",
        "finalize-sent-eq-amount": "function spec",
        "keys-distinct": "state invariant",
        "keys-invariant-inter": "single-transition invariant",
        "keys-invariant-intra": "single-transition invariant",
        "receive-not-revert": "other",
        "state-idle-req-inter": "state invariant",
        "state-idle-req-intra": "state invariant",
        "state-req-amount-consistent": "state invariant",
        "state-update": "single-transition invariant",
        "state-update-receive": "single-transition invariant",
        "withdraw-finalize-not-revert": "multiple-transition invariant",
        "withdraw-finalize-not-revert-receive": "multiple-transition invariant",
        "withdraw-finalize-revert-inter": "multiple-transition invariant",
        "withdraw-not-revert": "function spec",
        "withdraw-revert": "function spec",
        "withdraw-withdraw-revert": "multiple-transition invariant",
        "okey-rkey-private-withdraw": "other",
        "rkey-no-withdraw": "other",
        "tx-idle-req": "other",
        "tx-idle-req-eoa": "other",
        "tx-req-idle": "other",
        "tx-req-idle-eoa": "other",
        "tx-owner-assets-transfer": "other",
        "tx-owner-assets-transfer-eoa-receive": "other",
        "tx-tx-assets-transfer": "other",
        "tx-tx-assets-transfer-eoa": "other",
        "tx-tx-assets-transfer-eoa-receive": "other",
        "tx-tx-assets-transfer-eoa-receive-private": "other"
    }
}
