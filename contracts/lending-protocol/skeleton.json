{
    "name": "Lending protocol",
    "specification": "file:spec.md",
    "properties": {
        "borrow-additivity": "if a sender A can perform two (successful) `borrow` of n1 and n2 token units (of the same token T), then A can always obtain an equivalent effect (on the state of the contract and on its own token balance) through a single `borrow` of n1+n2 units of token T. Here equivalence neglects transaction fees.",
        "borrow-post": "TODO",
        "credits-zero": "if the total credits of a token T are zero, then also the debits and the reserves of T are zero.",
        "borrow-reversibility": "if a sender A performs a (successful) `borrow`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `borrow`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "deposit-additivity": "if a sender A can perform two (successful) `deposit` of n1 and n2 token units (of the same token T), then A can always obtain an equivalent effect (on the state of the contract and on its own token balance) through a single `deposit` of n1+n2 units of token T. Here equivalence neglects transaction fees.",
        "deposit-post": "TODO",
        "deposit-redeem-reverse": "if a sender A performs a (successful) `deposit` of n1 token units and then a (successful) `withdraw` of n1*1000000/XR(token_addr), then the amount of the credits and debts of A is restored to that in the state before the `deposit`. Assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "deposit-reversibility": "if a sender A performs a (successful) `deposit`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `deposit`. Assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "deposit-reversibility-collateralized": "if a sender A performs a (successful) `deposit`, and A is collateralized, then A can fire a transaction that restores the amount credits and debts of A to the state before the `deposit`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "redeem-reversibility": "if a sender A performs a (successful) `redeem`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `redeem`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "trace1": "TODO",
        "xr-increasing": "for each token type T handled by the lending protocol, any transaction of type `deposit`, `borrow`, `repay` and `redeem` do not decrease the exchange rate XR(T). The only execption is when a `redeem` is performed, and after that the total credits become zero. Assume that before performing the transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "xr-invariant": "for each token type T handled by the lending protocol, any transaction of type `deposit`, `borrow`, `repay` preserve the exchange rate XR(T). Assume that before performing the transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "xr-geq-one": "for each token T handled by the lending protocol, the exchange rate XR(T) is always greater than or equal to 1000000" ,
        "withdraw-reversibility": "if a sender A performs a (successful) `withdraw`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `withdraw`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "zero-credits-implies-zero-debts": "for each token type T, if the sum of the credits in T of all users is zero, then also the sum of the debts in T of all users are zero",
        "zero-credits-implies-zero-reserves": "for each token type T, if the sum of the credits in T of all users is zero, then also the reserves in T are zero"
    }
}
