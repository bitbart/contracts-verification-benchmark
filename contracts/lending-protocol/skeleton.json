{
    "name": "Lending protocol",
    "specification": "file:spec.md",
    "properties": {
        "bor-additivity": "if a sender A can perform two (successful) `borrow` of n1 and n2 token units (of the same token T, and in the same interest accrual period), then A can always obtain an equivalent effect (on the state of the contract and on its own token balance) through a single `borrow` of n1+n2 units of token T. Here equivalence neglects transaction fees.",
        "bor-state": "TODO",
        "bor-reversibility": "if a sender A performs a (successful) `borrow`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `borrow`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "credits-zero": "if the summation of the credits of a token T of all users are zero, then also the summations of the debits of T and of the reserves of T are zero.",
        "dep-additivity": "if a sender A can perform two (successful) `deposit` of n1 and n2 token units (of the same token T), then A can always obtain an equivalent effect (on the state of the contract and on its own token balance) through a single `deposit` of n1+n2 units of token T. Here equivalence neglects transaction fees.",
        "dep-state": "if a user A performs a successful `deposit(amount,token)`, then after the transaction: (1) the reserves of T in the LP are increased by `amt`; the credits of A in T are increased by `amt` * 1e6 divided by the exchange rate of T the pre state; (3) the credits of A in all tokens different from T are preserved; (4) the debits of A in all tokens are preserved",
        "dep-tokens": "if a user A performs a successful `deposit(amount,token)`, then after the transaction: (1) the T balance of the LP is increased by `amt`; (2) the T balance of A is decreased by `amt`.",
        "dep-xr": "let XR(T) be the exchange rate of a token T handled by the LP in a given state, and let XR'(T) be the exchange rate after a successful transaction `deposit(amount,token)`. Then, XR(T) <= XR'(T) <= XR(T) + floor((amount * 1e6) / sum_credits[T]) + 1.",
        "dep-xr-eq": "the exchange rate XR(T) of any `token` handled by the LP is preserved by any transaction `deposit(amount,token)`",
        "dep-rdm-reverse": "if a sender A performs a (successful) `deposit` of n1 token units and then a (successful) `withdraw` of n1*1000000/XR(token_addr), then the amount of the credits and debts of A is restored to that in the state before the `deposit`. Assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "dep-reversibility": "if a sender A performs a (successful) `deposit`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `deposit`. Assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "dep-reversibility-collateralized": "if a sender A performs a (successful) `deposit`, and A is collateralized, then A can fire a transaction that restores the amount credits and debts of A to the state before the `deposit`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "rdm-reversibility": "if a sender A performs a (successful) `redeem`, then A can fire a transaction that restores the amount of credits and debts of A to the state before the `redeem`. Here, assume that before performing the first transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "rep-reversibility": "if a user A performs a (successful) `repay`, then after that transaction A can fire another transaction that restores the amount of credits and debts of A to the state before the `repay`. Here, assume that before performing the first transaction, the interests have already been accrued, for all token and users involved in the transaction.",
        "trace1": "TODO",
        "xr-geq-one": "for each token T handled by the lending protocol, the exchange rate XR(T) is always greater than or equal to 1000000",
        "xr-increasing": "for each token type T handled by the lending protocol, any transaction of type `deposit`, `borrow`, `repay` and `redeem` do not decrease the exchange rate XR(T). The only execption is when a `redeem` is performed, and after that the total credits become zero. Assume that before performing the transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction.",
        "xr-invariant": "for each token type T handled by the lending protocol, any transaction of type `deposit`, `borrow`, `repay` preserve the exchange rate XR(T). Assume that before performing the transaction, the interests have already been accrued, i.e. `lastAccrue` and `lastTotAccrue` coincide with the block number where the transaction is performed, for all token and users involved in the transaction."
    }
}
