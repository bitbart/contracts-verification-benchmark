{
    "name": "Safe",
    "properties": {
        "guardAddressChange": "The only method that can change the transaction guard is setGuard",
        "REFINED_guardAddressChange": "The transaction guard can be changed only via a call to the method setGuard or via a call performed by the owner",
        "REFINED2_guardAddressChange": "The transaction guard can be changed only via a call to the method setGuard or via a call performed by the owner or via a call performed by a module enabled on Safe",
        "REFINED3_guardAddressChange": "After the setup of Safe, the transaction guard can be changed only via a call to the method setGuard or via a call performed by the owner or via a call performed by a module enabled on Safe",
        "setGetCorrespondenceGuard" : "",
        "setGuardReentrant" : "setGuard can only be called by contract itself.",
        "txnGuardCalled" : "The transaction guard gets called both pre- and post- any execTransaction",
        "moduleGuardAddressChange" : "The only method that can change the module guard is setModuleGuard.",
        "setGetCorrespondenceModuleGuard" : "",
        "setModuleGuardReentrant" : "setModuleGuard can only be called by contract itself.",
        "moduleGuardCalled" : "",
        "moduleGuardCalledReturn" : "",
        "execTxnModulePermissions" : "A successful call to execTransactionFromModule must be from an enabled module",
        "execTxnModuleReturnDataPermissions" : "A call to execTransactionFromModuleReturnData that succeeds must be from an enabled module.",
        "executePermissions" : "Execute can only be called by execTransaction or execTransactionFromModule.",
        "executeThresholdMet" : "",
        "approvedHashesUpdate" : "approvedHashes[user][hash] can only be changed by msg.sender==user.",
        "approvedHashesSet" : "approvedHashes is set when calling approveHash",
        "transactionHashCantCollide" : "The hash of two distinct transactions cannot be the same.",
        "setupThresholdZeroAndSetsPositiveThreshold" : "setup can only be called if threshold = 0 and setup sets threshold > 0",
        "setFallbackIntegrity" : "The fallback handler gets set by setFallbackHandler.",
        "fallbackHandlerNeverSelf" : "The address for the fallback handler slot is never set to the Safe contract.",
        "simulateAndRevertReverts" : "simulateAndRevert always reverts.",
        "setSafeMethodSets" : "",
        "setSafeMethodRemoves" : "",
        "setSafeMethodChanges" : "",
        "handlerCallableIfSet" : "A handler, once set via setSafeMethod, is possible to call.",
        "handlerCalledIfSet" : "",
        "MYonlyOwnersAddModule" : "Adding and removing a module requires confirmation from all owners.",
        "MYonlyOwnersAddModule2" : "Adding and removing a module requires confirmation from at least `threshold` number of owners.",
        "MYboundedowners" : "The number of owners is bounded.",
        "MYboundedthreshold" : "The value of `threshold` is bounded.",
        "MYaddowner" : "An owner can be added only if at least a `threshold` number of owner agree."
        }
}
