{
    "name": "PriceBet",
    "specification": "file:spec.md",
    "properties": {
        "eventually-balance-zero": "eventually the contract balance goes to zero (assuming the fairness condition that timeout() is called at least once after the deadline).",
        "eventually-balance-zero-receive": "if the receive method of `owner` just accepts all ETH, eventually the contract balance goes to zero (assuming the fairness condition that `timeout()` is called at least once after the deadline).",
        "eventually-win": "eventually a user can withdraw the whole pot.",
        "eventually-win-receive-owner": "if the receive method of `owner` just accepts all ETH, eventually someone can withdraw the whole pot.",
        "eventually-win-receive-player": "if the receive method of `player` just accepts all ETH, eventually someone can withdraw the whole pot.",
        "join-balance-eq": "after a successful `join()`, the contract balance is equal to two times the `initial_pot`.",
        "join-balance-geq": "after a successful `join()`, the contract balance is greater than or equal to two times the `initial_pot`.",
        "join-not-revert": "a transaction `join()` does not revert if the ETH amount sent along with the transaction is equal to `initial_pot` and no player has joined yet",
        "join-only-once": "a `join()` transaction can only be called successfully once.",
        "join-player": "after a successful `join()`, `player` is not the zero address",
        "join-revert": "a transaction `join()` reverts if the amount of ETH sent along with the transaction is different from `initial_pot` or another player has already joined.",
        "no-frozen-funds": "after the deadline, any user can perform some transaction after which the entire pot is trasferred to the `owner` address.",
        "only-owner-or-player-receive":	"in any state after `join()`, only the owner or the player can receive ETH from the contract.",
        "owner-cannot-withdraw-before-deadline": "if the deadline has not passed yet, the `owner` cannot withdraw the pot.",
        "owner-cannot-withdraw-before-deadline-not-player": "if the deadline has not passed yet and the `owner` is not the `player`, then the `owner` cannot withdraw the pot.",
        "player-cannot-withdraw-after-deadline": "if the deadline has passed, the `player` cannot withdraw the pot.",
        "player-cannot-withdraw-after-deadline-not-owner": "if the deadline has passed, and the `player` is not the `owner`, then the `player` cannot withdraw the pot.",
        "player-immutable" : "if `player` is not the zero address, then its value does never change",
        "price-above-player-win-frontrun": "if the receive method of `player` just accepts all ETH, and in some state before the deadline the oracle exchange rate goes above the target `exchange_rate`, then in any subsequent state before the deadline the `player` can fire a transaction after which its ETH balance is increased by at least the entire pot.",
        "price-above-player-win": "if the receive method of `player` just accepts all ETH, in a state where the oracle exchange rate is above the target `exchange_rate` and the deadline has not passed, the `player` can fire a transaction after which its ETH balance is increased by at least the entire pot.",
        "price-below-player-lose": "if the oracle exchange rate is always below the target `exchange_rate` before the deadline, then `player` cannot withdraw the pot.",
        "price-below-player-lose-not-owner": "if the oracle exchange rate is always below the target `exchange_rate` before the deadline and the `player` is not the `owner`, then `player` cannot withdraw the pot.",
        "timeout-balance": "after a successful `timeout()`, the ETH balance of `owner` is increased by the entire contract balance.",
        "timeout-balance-receive": "if the receive method of `owner` just accepts all ETH, after a successful `timeout()`, the ETH balance of `owner` is increased by the entire contract balance.",
        "timeout-not-revert": "a transaction `timeout()` does not revert if the deadline has passed.",
        "timeout-not-revert-receive": "if the receive method of `owner` just accepts all ETH, a transaction `timeout()` does not revert if the deadline has passed.",
        "timeout-revert": "a transaction `timeout()` reverts if the deadline has not passed yet.",
        "transfer-pot": "if some user manages to withdraw ETH from the contract, then the amount withdrawn by that user is at least twice the initial pot",
        "transfer-pot-join": "if some user has joined the bet (i.e. `player` is not the zero address) and some user manages to withdraw ETH from the contract, then the amount withdrawn by that user is at least twice the initial pot",
        "win-balance": "after a successful `win()`, the ETH balance of `player` is increased by the entire contract balance.",
        "win-balance-receive": "if the receive method of `player` just accepts all ETH, then after a successful `win()`, the ETH balance of `player` is increased by the entire contract balance.",
        "win-frontrun": "if the `player` can win the bet, there exists an adversary that can frontrun the `player` to prevent him from actually winning.",
        "win-frontrun-not-oracle": "if the `player` can win the bet, there exists an adversary different from the oracle owner who can frontrun the `player` to prevent him from actually winning.",
        "win-not-revert": "a transaction `win()` does not revert if the deadline has not expired, the sender is the player, and the call to oracle returns an exchange rate that is greater than or equal to the target `exchange_rate`.",
        "win-pot": "after a successful `win()`, the ETH balance of `player` is increased at least twice the deposited pot.",
        "win-pot-receive": "if the receive method of `player` just accepts all ETH, then after a successful `win()`, the ETH balance of `player` increases of at least twice the deposited pot.",        
        "win-revert": "a transaction `win()` reverts if the deadline has expired, or the sender is not the player, or the oracle exchange rate is less than the oracle exchange rate. Assume that address oracle actually contains a deployment of contract Oracle."
    }
}
