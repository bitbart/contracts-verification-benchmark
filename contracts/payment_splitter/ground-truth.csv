property,version,truth,footnote-md
fair-split-eq,v1,0,"The expression `(totalReceived * shares[a]) / totalShares` can overflow, making the expression undefined"
fair-split-eq,v2,0,"see v1"
fair-split-eq,v3,0,"see v1"
fair-split-eq,v4,0,"see v1"
fair-split-eq,v5,0,"This version has a bug in `pendingPayment()` such that it will always return `0` if there are multiple `payees`"
fair-split-eq,v6,0,"see v1"
fair-split-eq,v7,0,"see v1"
fair-split-eq,v8,0,"see v1"
fair-split-eq,v9,0,"see v1; payees can have 0 shares, so `(totalReceived * shares[a]) / totalShares` can throw a division by zero error"
fair-split-eq,v10,1,
fair-split-eq-no-overflow,v1,1,
fair-split-eq-no-overflow,v2,1,
fair-split-eq-no-overflow,v3,1,
fair-split-eq-no-overflow,v4,0,"ETH transfer can fail silently in release(); accounting is updated but no funds are sent, breaking the split invariants."
fair-split-eq-no-overflow,v5,1,"This version has a bug in `pendingPayment()` such that it will always return `0` if there are multiple `payees`"
fair-split-eq-no-overflow,v6,1,
fair-split-eq-no-overflow,v7,1,
fair-split-eq-no-overflow,v8,0,"release() siphons 1 wei to the owner when payment=0; this reduces balance without updating released[], breaking equality and >= invariants."
fair-split-eq-no-overflow,v9,0,"if all payees have 0 shares, totalShares=0 leads to division by zero in the split formula."
fair-split-eq-no-overflow,v10,1,
fair-split-geq,v1,0,"The expression `(totalReceived * shares[a]) / totalShares` can overflow, making the expression undefined"
fair-split-geq,v2,0,"see v1"
fair-split-geq,v3,0,"see v1"
fair-split-geq,v4,0,"see v1"
fair-split-geq,v5,0,"This version has a bug in `pendingPayment()` such that it will always return `0` if there are multiple `payees`"
fair-split-geq,v6,0,"see v1"
fair-split-geq,v7,0,"see v1"
fair-split-geq,v8,0,"see v1"
fair-split-geq,v9,0,"see v1; payees can have 0 shares, so `(totalReceived * shares[a]) / totalShares` can throw a division by zero error"
fair-split-geq,v10,1,
fair-split-geq-no-overflow,v1,1,
fair-split-geq-no-overflow,v2,1,
fair-split-geq-no-overflow,v3,1,
fair-split-geq-no-overflow,v4,0,"release() could fail to send the ETH to the payee but still not revert, leading to the rule being violated"
fair-split-geq-no-overflow,v5,1,
fair-split-geq-no-overflow,v6,1,
fair-split-geq-no-overflow,v7,1,
fair-split-geq-no-overflow,v8,0,"release() siphons 1 wei to the owner when payment=0; this reduces balance without updating released[], breaking equality and >= invariants."
fair-split-geq-no-overflow,v9,0,"if all payees have 0 shares, totalShares=0 leads to division by zero in the split formula."
fair-split-geq-no-overflow,v10,1,
non-zero-payees,v1,1,
non-zero-payees,v2,1,
non-zero-payees,v3,1,
non-zero-payees,v4,1,
non-zero-payees,v5,1,
non-zero-payees,v6,0,"ZERO_ADDRESS != address(0)"
non-zero-payees,v7,1,
non-zero-payees,v8,1,
non-zero-payees,v9,1,
non-zero-payees,v10,1,
positive-shares,v1,1,"addPayee requires that share is positive"
positive-shares,v2,1,
positive-shares,v3,1,
positive-shares,v4,1,
positive-shares,v5,1,
positive-shares,v6,1,
positive-shares,v7,1,
positive-shares,v8,1,
positive-shares,v9,0,"shares can be zero"
positive-shares,v10,1,
releasable-leq-balance,v1,1,
releasable-leq-balance,v2,1,
releasable-leq-balance,v3,1,
releasable-leq-balance,v4,1,
releasable-leq-balance,v5,1,
releasable-leq-balance,v6,1,
releasable-leq-balance,v7,1,
releasable-leq-balance,v8,1,
releasable-leq-balance,v9,1,
releasable-leq-balance,v10,1,
releasable-sum-balance,v1,0,"The balance could be non-divisible by the number of shares, leaving a remainder in the balance"
releasable-sum-balance,v2,0,"see v1"
releasable-sum-balance,v3,0,"see v1"
releasable-sum-balance,v4,0,"see v1"
releasable-sum-balance,v5,0,"`totalReleasable()` is always `0`"
releasable-sum-balance,v6,0,"see v1"
releasable-sum-balance,v7,0,"see v1"
releasable-sum-balance,v8,0,"see v1"
releasable-sum-balance,v9,0,"see v1"
releasable-sum-balance,v10,0,"see v1"
release-balance-payee,v1,0,"`payee` is a contract with a receive that transfers the incoming ETH elsewhere"
release-balance-payee,v2,0
release-balance-payee,v3,0
release-balance-payee,v4,0,"`release()` does not verify the success of the call, so even when it doesn't revert, it is not guaranteed that the call didn't"
release-balance-payee,v5,0
release-balance-payee,v6,0
release-balance-payee,v7,0
release-balance-payee,v8,0
release-balance-payee,v9,0
release-balance-payee,v10,0
release-balance-contract,v1,1
release-balance-contract,v2,1
release-balance-contract,v3,1
release-balance-contract,v4,0,"`release()` does not verify the success of the call, so even when it doesn't revert, it is not guaranteed that the call didn't"
release-balance-contract,v5,1
release-balance-contract,v6,1
release-balance-contract,v7,1
release-balance-contract,v8,0,"if `releasable(a)==0` and `balance > 0`, one ETH will be transferred to `owner`, decreasing the balance of `PaymentSplitter`"
release-balance-contract,v9,0,"see v8"
release-balance-contract,v10,1
release-not-revert,v1,0,"The contract could revert when `totalReleased += payment` overflows, or when the external call reverts"
release-not-revert,v2,0,"see v1"
release-not-revert,v3,0,"see v1"
release-not-revert,v4,1,
release-not-revert,v5,0,"if `payees.length > 1`, for any payee `a` in `payees`, `releasable(a) == 0` leading to the `release(a)` function reverting"
release-not-revert,v6,0,"see v1"
release-not-revert,v7,0,"see v1; if the caller of `release(a)` is not `a`, the function will revert"
release-not-revert,v8,0,"see v1"
release-not-revert,v9,0,"see v1"
release-not-revert,v10,0,"see v1"
release-not-revert-receive,v1,1,
release-not-revert-receive,v2,1,
release-not-revert-receive,v3,1,
release-not-revert-receive,v4,1,
release-not-revert-receive,v5,1,
release-not-revert-receive,v6,1,"also address(0) can receive ETH"
release-not-revert-receive,v7,0,"if the sender is not the account, the function reverts"
release-not-revert-receive,v8,1,
release-not-revert-receive,v9,1,
release-not-revert-receive,v10,1,
release-release-revert,v1,0,"`a` is a contract whose payable fallback, upon receiving ETH, immediately sends ETH to the PaymentSplitter"
release-release-revert,v2,0,
release-release-revert,v3,0,
release-release-revert,v4,0,
release-release-revert,v5,0,
release-release-revert,v6,0,
release-release-revert,v7,0,
release-release-revert,v8,0,
release-release-revert,v9,0,
release-release-revert,v10,0,
release-release-revert-receive,v1,1,
release-release-revert-receive,v2,1,
release-release-revert-receive,v3,1,
release-release-revert-receive,v4,1,
release-release-revert-receive,v5,1,
release-release-revert-receive,v6,1,
release-release-revert-receive,v7,1,
release-release-revert-receive,v8,0,"if PaymentSplitter's balance > 0, 1 ETH will be sent to owner, even if releasable(a) == 0, and the function will not revert"
release-release-revert-receive,v9,0,"if PaymentSplitter's balance > 0, 1 ETH will be sent to owner, even if releasable(a) == 0, and the function will not revert"
release-release-revert-receive,v10,1,
swappable-call-order,v1,0,"If the receivers of the funds send different amounts of money back to the contract as a fallback, resulting releases may differ"
swappable-call-order,v2,0,"see v1"
swappable-call-order,v3,0,"see v1"
swappable-call-order,v4,0,"see v1"
swappable-call-order,v5,1,"if `payees.length > 1`, given a `payee` `a`, any call to `release(a)` will revert, so the order of the two calls does not matter",
swappable-call-order,v6,0,"see v1"
swappable-call-order,v7,0,"see v1"
swappable-call-order,v8,0,"see v1"
swappable-call-order,v9,0,"see v1"
swappable-call-order,v10,0,"see v1"
tx-transfer-balance-receive,v1,0,"false if forall a : balance * shares[a] < totalShares",
tx-transfer-balance-receive,v2,0,
tx-transfer-balance-receive,v3,0,
tx-transfer-balance-receive,v4,0,
tx-transfer-balance-receive,v5,0,
tx-transfer-balance-receive,v6,0,
tx-transfer-balance-receive,v7,0,
tx-transfer-balance-receive,v8,1,"owner can withdraw remaining balance",
tx-transfer-balance-receive,v9,0,"all payees can have zero shares"
tx-transfer-balance-receive,v10,0,
tx-transfer-releasable-receive,v1,1,
tx-transfer-releasable-receive,v2,1,
tx-transfer-releasable-receive,v3,1,
tx-transfer-releasable-receive,v4,1,
tx-transfer-releasable-receive,v5,1,
tx-transfer-releasable-receive,v6,1,"also address(0) can receive ETH",
tx-transfer-releasable-receive,v7,0,"if `a` is a contract without a function to call `releasable`, then nobody can fire the required transaction",
tx-transfer-releasable-receive,v8,1,
tx-transfer-releasable-receive,v9,1,
tx-transfer-releasable-receive,v10,1,